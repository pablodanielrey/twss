---
propiedades equivalentes definidas en distintos espacios de nombres.
https://dbpedia.org/ontology/birthDate
https://dbpedia.org/property/birthDate
para que lo hacen?, cual es el sentido?.
creo que es un resutlado de la consulta sparql, y no como se definiría la ontología normalmente.
las dbpedia.org/property veo que los valores ya están desreferenciados.
lo consulté en el foro igual a ver si es así.


----
exportar iris externas en nuestros datasets/convertir a iris y propiedades internas.
lo consulté en el foro también.
obtener los datos asociados y exportarlos usando las mismas iris dentro de mi owl final?. ej:

twws:Antonio_Banderas  owl:sameAs  dbr:recurso_de_dbpedia .
dbr: recurso_de_dbpedia     dbo:occupation  dbr:funcion_de_dbpedia .
dbr:funcion_de_dbpedia      dbo:title       "Actor, producer, director"@en .

esto sería sin cambiar las iris que obtengo. pero escribiéndolo en mi owl final para poder indicar que obtuve esa información.
solo me hace ruido el exportar información que no corresponde a mi namespace en mis datos. pero creo que sería la correcta para
no duplicar información y promover usar todos las mismas iris.

o convertir las iris a iris internas de mi ontología, generar propieades para representar esa info y exportarlo de esa forma en mi owl final?. ej:

twws:Antonio_Banderas         twss:occupation       "Actor, producer, director"@en .

esta me hace ruido con respecto a que estaría generando propiedades para representar la misma info que ya está disponible. y duplicando propieades.
es la que uso en este tp igualmente.

-----------

cuando guardo la wiki en mi owl, uso foaf:isPrimaryTopicOf
la misma propiedad que tiene definido el individual en la ontología de dbpedia.
ya que asocia:
Thing --> Document
lo cual sigue funcionando para mi ontología.
así que reuso esa propiedad y no defino ninguna nueva.

http://xmlns.com/foaf/spec/#term_isPrimaryTopicOf
Property: foaf:isPrimaryTopicOf
is primary topic of - A document that this thing is the primary topic of.
Status:	stable
Domain:	having this property implies being a Thing
Range:	every value of this property is a Document
Inverse Functional Property	

----

otro tema que me resulta medio raro a medida que se hacen cosas mas avanzadas, 
el lenguaje de consulta que me da rdflib 
analizar en que namespace esta el objeto de una tripleta?.
lo estoy analizando por string, al fin y al cabo son iris.
ej:

    for st,sp,so in g.triples((None, OWL.sameAs, None)):
        if 'dbpedia' in str(so):
            print(f'Accediendo a {so}')
            iri = str(so)


----


como extendí mi ontología anterior para definir las propieades y clases que me faltaban agrego un parámetro 
para que se una con lo requerido del ejercicio
asi que para ejecutar el ejercicio tendría:

pablo@xiaomi:/src/github/facu-infor/twss/entrega4/src$ python3 entrega.py ../../owl/twss_schema_extended2.ttl ../data/dataset-original.ttl ../data/links.ttl > ../data/dataset-enriquecido.ttl

funciona bien pero no me muestra como individuals a las ocupaciones que están en el turtle generadas como blank nodes.

-----

dejo toda la ontología final dentro de twss_final.ttl
asi queda un poco mas claro para ale y diego para corregir.
y acomodo el dataset-original.ttl para que use esa ontología y no la cadena de extensiones que hice en el tp anterior.

por lo que queda solo como clases y propiedades específicas del namespace del github. (para indicar que son extensiones que no están definidas en schema.org)

:Cinema rdf:type owl:Class ;
        rdfs:subClassOf <http://schema.org/CivicStructure> .


:Show rdf:type owl:Class ;
      rdfs:subClassOf <http://schema.org/Event> .


:ShowRoom rdf:type owl:Class ;
          rdfs:subClassOf <http://schema.org/Place> .



:movieFormat rdf:type owl:DatatypeProperty ;
             rdfs:domain :Show ;
             rdfs:range xsd:string .


:cinema rdf:type owl:ObjectProperty ;
        rdfs:subPropertyOf owl:topObjectProperty ;
        rdfs:domain :ShowRoom ;
        rdfs:range :Cinema .


:movie rdf:type owl:ObjectProperty ;
       rdfs:domain :Show ;
       rdfs:range <http://schema.org/Movie> .


:showRoom rdf:type owl:ObjectProperty ;
          rdfs:domain :Show ;
          rdfs:range :ShowRoom .



y todas las demas como clases y propieades del namespace http://schema.org

-----

Al realizar estas transformaciones de schemas y prefijos se ve la importancia de definir un namespace distinto para los individuals.
no tuve que modificar prácticamente nada. fue super simple unificar las ontologías en una sola.

-----

una cosa que me quedó dando vueltas en la cabeza es si las iris escapadas son iguales a la iris en utf8

iris escapadas vs iris sin escapar.

<https://raw.githubusercontent.com/pablodanielrey/twss/master/owl/data/Alexander_Skarsg%C3%A5rd>
es igual? a :
twssd:Alexander_Skarsgård

para protegé no son iguales!!!.
o sea que las iris no llevan ningún tipo de tratamiento evidentemente de escape antes de ser interpretadas. son interpretadas textualmente.
así que modifico links.ttl para apuntar al recurso con el nombre en utf8 que es la misma iri de mi individuals.
-----


como conclusión final del trabajo me llevo lo siguiente:

1 - reusar todo lo posible de otras ontologías, simplifica un poco el merge de datos y la interpretación al no tener cosas repetidas en distintas propiedades y tipos.
de hacerlo de nuevo lo haría de esa forma.

2 - no existe solución correcta, y a una consigna simple existen multitud de soluciones e implementaciones distintas que no se me habían ocurrido. y todo los scripts que he realizado
en todas las entregas me dan sensación de ser un prototipo para entender el problema y no una solución completa. en todas las entregas me tomaría unos 15 días mas como mínimo para mejorar el código y hacerlo mas robusto, mas correcto, etc.

3 - aunque el objetivo del tp sea analizar el proceso de "follow your nose" y entender como ir desreferenciando recursos que tegnan presencia en la web.
seguir tratabajando con las ontologías ayuda a entender un poco mas la forma de organizarlas, pros y contras de cada una de las opciones.
por ejemplo en este caso traté de realizar lo contrario del tp anterior (que me dió la sensación de que no estaba correcto). en vez de importar ontologías separadas, definir todo en una.

4 - todavía me faltan hacer miles de pruebas para entender bien como funcionan las reglas de inferencia. no hice pruebas con herramientas de chequeo de las ontologías, y esto 
por ahi podría ayudarme a entender las consecuencias de lo que desarrollamos dentro de una web semántica. o sea mi solución, que impacto tiene? y que define para otros datasets?
ej el poner una propiedad como equivalente, que implica para otros datasets?.   schema:author sameAs dbo:author 
la primera vez que me pude dar una idea de la mala solución que implementé (deifnir mis propieadeas por sobre reutilizar con rango y dominio redefinido las de dbpedia) fue cuando traté de unir los datasets de los demas grupos!.

