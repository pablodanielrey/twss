///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Diseño y análisis de solución inicial
//////////////////////////////////////////////////////////////

datos a obtener de las películas, en base a lo que explicaron del tp1:
título
hora
fecha
duración
se esta dando o es a futuro?
director
idioma
idioma es original? (para analizar si es doblada)
tiene subtitulos
idioma subtitulos

los puntos principales para seguir en el diseño de la solucíón:
1 - la idea principal es primero testear si se puede hacer scraping de la página para obtener datos mínimos (script inicial)
2 - evaluar datos obtenidos para ver si tienen algún formato, si se pueden agrupar de alguna forma, deduplicación, etc.
3 - implementar un script mínimo para almacenar los datos de alguna forma normalizada
4 - evaluar la implementación anterior y diseñar alguna implementación mas correcta, dar prioridad a la simplicidad y claridad de código, no a la performance. enfocandome en no sobrediseñar la solución.


------------------------- implementación del punto 1. sobre cinemalaplata.com.ar ------------------------------

script inicial en base al dado en la teoría para testear librerías y el ambiente.

---

la estructura que veo de cada detalle de película es:

<div id='content'> <-- contenido
    <div class='page-container page-title'>
            titulo
    </div>
    <div class='post-container singlepost'>
        <div class='dropcap6'> <-- contenido de cada dato.
            <h4> <--- tipo de dato
            <p><span> <-- dato
        </div>
    </div>
</div>

datos que se pueden obtener:

Género
Idioma
Origen
Web Oficial
Duracion
Director
Clasificacion
Actores
Sinopsis
Horarios

el div de horarios tiene, la siguiente estructura:

<div>
    <h4>
    <div>
        <h5><span><a> <----- cine
        <p>
            <span> <-- horario 1
            <span> <-- horario 2

ejemplo de datos:

Horarios:

<div id="ctl00_cph_pnFunciones">
		
            <h4 class="shortcodes-title">
                Horarios
            </h4>
            
            <div class="col-2">
                <h5>
                    <span id="ctl00_cph_rptSalas_ctl00_lblSala"><a href="/complejos.aspx?Complejo=CINEMA OCHO" class="cine">CINEMA OCHO</a> - SALA HD</span></h5>
                <p>
                    
                            <span id="ctl00_cph_rptSalas_ctl00_rptHorarios_ctl00_lblHorarios">CASTELLANO:     16:10<br></span>
                        
                            <span id="ctl00_cph_rptSalas_ctl00_rptHorarios_ctl01_lblHorarios">SUBTITULADA:     14:00 - 18:25 - 23:05<br></span>
                        
                    <br>
                </p>
            </div>
       
	</div>

en el caso de tener múltiples shows en distintos cines:

<div id="ctl00_cph_pnFunciones">
		
            <h4 class="shortcodes-title">
                Horarios</h4>
            
                    <div class="col-2">
                        <h5>
                            <span id="ctl00_cph_rptSalas_ctl00_lblSala"><a href="/complejos.aspx?Complejo=CINEMA CITY" class="cine">CINEMA CITY</a> - SALA 4D <img src="/IMG/4D.GIF"></span></h5>
                        <p>
                            
                                    <span id="ctl00_cph_rptSalas_ctl00_rptHorarios_ctl00_lblHorarios">CASTELLANO:     13:00 - 15:30 - 18:05<br></span>
                                
                                    <span id="ctl00_cph_rptSalas_ctl00_rptHorarios_ctl01_lblHorarios">SUBTITULADA:     20:40 - 23:10<br></span>
                                
                            <br>
                        </p>
                    </div>
                
                    <div class="col-2">
                        <h5>
                            <span id="ctl00_cph_rptSalas_ctl01_lblSala"><a href="/complejos.aspx?Complejo=CINEMA OCHO" class="cine">CINEMA OCHO</a> - SALA HD</span></h5>
                        <p>
                            
                                    <span id="ctl00_cph_rptSalas_ctl01_rptHorarios_ctl00_lblHorarios">CASTELLANO:     16:45 - 19:45<br></span>
                                
                                    <span id="ctl00_cph_rptSalas_ctl01_rptHorarios_ctl01_lblHorarios">SUBTITULADA:     13:45 - 22:45<br></span>
                                
                            <br>
                        </p>
                    </div>
                
                    <div class="col-2">
                        <h5>
                            <span id="ctl00_cph_rptSalas_ctl02_lblSala"><a href="/complejos.aspx?Complejo=CINEMA ROCHA" class="cine">CINEMA ROCHA</a> - SALA HD</span></h5>
                        <p>
                            
                                    <span id="ctl00_cph_rptSalas_ctl02_rptHorarios_ctl00_lblHorarios">CASTELLANO:     15:00 - 20:20<br></span>
                                
                                    <span id="ctl00_cph_rptSalas_ctl02_rptHorarios_ctl01_lblHorarios">SUBTITULADA:     17:40 - 23:00<br></span>
                                
                            <br>
                        </p>
                    </div>
                
                    <div class="col-2">
                        <h5>
                            <span id="ctl00_cph_rptSalas_ctl03_lblSala"><a href="/complejos.aspx?Complejo=CINEMA SAN MARTIN" class="cine">CINEMA SAN MARTIN</a> - SALA HD</span></h5>
                        <p>
                            
                                    <span id="ctl00_cph_rptSalas_ctl03_rptHorarios_ctl00_lblHorarios">CASTELLANO:     14:00 - 17:00 - 22:40<br></span>
                                
                                    <span id="ctl00_cph_rptSalas_ctl03_rptHorarios_ctl01_lblHorarios">SUBTITULADA:     19:50<br></span>
                                
                            <br>
                        </p>
                    </div>        
        
	</div>


---------------------------- solución del punto 2 -------------------------

después de algún análisis a los datos se ve que los datos retornados no están normalizados como es de esperar.
tienen retornos de carros, saltos de línea, no todo tiene tilde, etc.

la idea principal sería generar un formateador que normalice un poco los datos.
y posiblemente deduplique los mismos a futuro.

usando algún beautifier de json analizo un poco los datos.
https://codebeautify.org/jsonviewer

---


Algunas conclusiones:

cinemalaplata.com.ar
    - idioma en la película es el idioma original. ignorar la descripción que indica después.
      ej:
        Inglés subtitulada ---> Inglés

    para ver si esta subtitulada o doblada se debe ver en la descripción de las funciones.
      ej:
        :	CASTELLANO:     16:45 - 19:45
            SUBTITULADA:     13:45 - 22:45


    - el manejo de salas está indicado en el nombre del CINE separado por -
        ej: :	
            CINEMA PARADISO - SALA HD
            CINEMA CITY - SALA 4D
            
    - normalizar el manejo de idiomas. Castellano == Español?
      para nuestro caso de aplicación me parece que si.

    - Actores estan separados por , por lo que es simple obtener la lista.

    - fecha de la función en cinemalapalta no esta, se asume cartelera idem todos los días. 
      la fecha límite de finalización de esa cartelera esta indicada arriba del todo.
      el div con clase 'post-container title'
      <div class="post-container page-title">
        Cartelera hasta 31/3/2021
      </div>


-----

primer modificación al script de parser de datos.
manejar las salas.
se resuelve usando un split en la info del cine, eso me da la sala y el cine.
corrijo el script para obtener esa info desagregada

-------

ahora el problema a resolver es parear los horarios de las funciones.
lo mejor que veo es generar alguna expresión regular para poder parsear el contenido del string.
pero en casos como:
CASTELLANO:     16:30 - 20:30 - 22:10
tengo grupos de patrones repetidos.
la solución que se me ocurre inicialente es usar 2 expresiones regulares.
primero desagrupo los horarios del idioma y en una segunda expresión capturo todos los horarios.
(?P<lang>[a-zA-Z]*?):\s*(?P<hours>\d+.*)
(?P<hours>\d+:\d+)
las pude probar usando por ejemplo: https://pythex.org/
corrijo el script para usar esas expresiones y poder tener esos datos desagregados.

--------------------

problema a resolver : desagregar los actores en una lista.
están separados por , así que con un simple split se resuelve.
corrijo el script para realizarlo

--------------------

use el mismo esquema que la solución anterior, para dejar correctamente el idioma original y los minutos de duracíón.
corrijo el script para realizarlo

--------------------

Creo que ya se tienen datos aceptables del sitio de cinemalaplata.com.ar
ahora habría que lograr lo mismo pero con el otro sitio.

-------------------------------

la parte de selenium. instalo el driver del chrome

https://www.toptal.com/python/web-scraping-with-python

https://chromedriver.storage.googleapis.com/index.html?path=89.0.4389.23/

https://www.perfecto.io/blog/xpath-in-selenium

https://www.guru99.com/xpath-selenium.html




----------------------

NOTAS:

Idioma -
en cinemalaplata si dice el idioma original.
y si esta subtitulado indica como subtitulado, si esta doblada indica CASTELLANO

los idiomas en cinepolis se indican como subtitulado/español en cada función
y no dice el idioma de la película original. se debe inferir desde el origen de la película.
pero que pasa en caso de coproducciones?

--

Género-
cinemalaplata asigna solo un Género y/o los separa por /
cinepolis asigna múltiples generos separados por ,

inclusive difieren las clasificaciones. para nuevos mutantes cinemalaplata tiene comedia, y cinepolis no.

--

Formato-
cinemalaplata no tiene formato. se asume por el nombre de la sala?
cinepolis si indica el formato (2d,3d)

--

Clasificación-
cinemalaplata tiene otra nomenclatura para calificación
cinepolis usa el standard de calificación P-13, P-

---

Origen-
en cinemalaplata orígenes difieren las plabras. ej EEUU
cinépolis (Estados Unidos)

---
Actores -
cinemalaplata - no siempre esta completa e inclusive errónea. 
antonio banderas está como cast de nuevos mutantes y no existe en imdb


------------


generación del proceso de merge.

dado los datos que estoy analizando de las carteleras despues de obtener los jsons.
me parece correcto generar el merge en base a:

Titulo y director 

ya que tengo esa info y es la misma dentro de todas las películas analizadas.
se debe tener en cuenta el director también ya que existen remake de películas con mismo título pero distintos actores.

tomar el conjunto de actores para relacionar películas entre si.
como comentaron en el foro una buena técnica a usar es alguna intersección del conjunto de actores para incrementar la confianza en la relación entre las películas.
esto no es determinante ya que podría darse una trilogía, segundas partes, películas del mismo universo como las de super héroes, con los mismos actores pero siendo distintas películas.

también usando IA se podría dar al algoritmo esos parámetro + el plot de la película, y obtener algún indice de confianza de igualdad, pero excede el problema del TP1.
por ejemplo:
https://towardsdatascience.com/using-nlp-to-find-similar-movies-based-on-plot-summaries-b1481a2ba49b



https://www.jsonmatrix.com/


--- 


temas a analizar.

unificación de las claves a usar en el json.
combiene que ya el proceso de scraping genere los diccionarios con claves standards.
así el proceso de merge usa esas claves para analizar la igualdad



cambie el esquema final del json. 
ahora tiene información del proceso de scraping y los datos de los shows está separado al de las películas.

agregar información de validez de los datos scrapeados
usando una cabecera para estos datos se puede agregar todos los datos necesarios para evaluar los procesos de scrapings


----------

Problema para unificar varias fuentes de datos en una sola.
el caso de trolls 2 es un caso particular

los criterios que use para identificar si son la misma película e intentar unificar los datos de la misma son:
titulo, director y actores

en cinemalaplata.com.ar cargaron la película con título en inglés, y en este caso el sitio no provee titulo original dentro de los metadatos de la película.
"Trolls 2: World Tour"
los actores cargados son : "animación" 
director: "Walt Dohrn, David P. Smith" 

en cinepolis.com el título se encuentra en castellano y el título original que se encuentra indicado en inglés esta cargado como "Trolls 2" solamente.
"Trolls 2: Gira mundial" 
titulo origial: "Trolls 2"
los actores si están cargados correctamente.
director: "Walt Dohrn"

en imdb.com
la película se indica con el título : "Trolls World Tour"
los directores los indica como: "Walt Dohrn, David P. Smith (co-director)"

no veo salida a este tipo de situaciones mas que usar campos adicionales, por ejemplo la synopsis mediante algun proceso estadístico o de IA para determinar si se está describiendo a la misma película.
el año de estreno, escritores, etc. (que en este caso no se obtienen de ninguno de los sitios scrapeados)

otra estrategia podria ser aplicar procesos de revisión sobre los datos antes de publicarlos. marcar los casos dudosos para poder recitificarlos en el proceso de merge.
ej: mediante una base especial se indicaría que trolls2, trolls 2: gira mundial son la misma película, esta base la tendría en cuenta el proceso de merge para "forzar" el merge de esas 2 películas.


----------

Problema de representación de datos para casos donde no se tiene la información completa.
por ejemplo el formato de la pelicula en las salas de los cines. (cinepolis lo indica, cinemalaplata no)
algo importante a evaluar es en donde manejamos este tipo de cuestiones. 
una posibilidad es en la base de datos usada. ej si usamos una db relacional y tenemos una tabla para almacenar los shows, deberíamos ir modificando los esquemas para agregar los campos que nos van apareciendo. quedarán incompletos o nulos los casos que no se cuente con esa información.
otra posibilidad es manejarlo en código y controlar si existen esos datos o no al momento de procesarlos, ej: usando un json que permite almacenar solo las claves que se tengan.
en mi caso ya que estoy usando json para almacenar los datos uso el control en código.

-------

Problema de diferentes standards entre los sitios para representar la misma información.
Por ejemplo:
cinemalaplata indica como EEUU al origen de algunas películas
cinépolis indica como Estados Unidos

otro caso podría ser el de la clasificación de las películas.
cinemalaplata indica de formato : "Apta mayores de 16 años"
cinepolis usa un standard : "P-13"

estrategias para resolver ese tipo de cuestiones podrían ser aplicar algún análisis de cada sitio, y generar mapeos manuales de la info en los scrapers hacia el standard que queremos manejar en el sistema.
ej: "mayores de 16" --> "P-16"
y usar en estos casos el standard P-X para representar las clasificaciones dentro del sistema.
estrategia usada en el scraper de cinemalaplata.

def format_rating(s):
    atp_rating = re.compile('.*?apta\s*.*?todo\s*.*?público.*', re.IGNORECASE)
    m = atp_rating.match(s)
    if m:
        return 'ATP'

    yrating = re.compile('.*?(?P<years>\d+)\s*?años.*', re.IGNORECASE)
    m = yrating.match(s)
    if m:
        years = m.group('years')
        return f'P-{years}'
    
    return s.strip()

o

(Movie.ORIGIN.value, lambda l: [s.strip().replace('EEUU','Estados Unidos') for s in l.split('-')]),


-----

Problema de información errónea dentro de uno de los sitios que se hace scraping.

"Los nuevos mutantes"
en cinemalaplata se asigna como actor a "Antonio Banderas"
en cinepolis no aparece como actor
en imdb.com no aparece como actor

en este caso no podemos identificar en el proceso de merge si "Antonio Banderas" es un actor que falta agregar o es información errónea.
una estrategia para solucionar este problema podría ser usar una fuente "cierta, verificada o confiable" de información para cada dato, y unificar los resultados en el proceso de merge teniendo en cuenta solo una fuente para cada uno de los mismos. Ej sacar solo de imdb.com los datos de los actores de las películas.
otra estrategia podría ser aplicar algún proceso estadístico entre varias fuentes de datos. ej scrapear mas sitios de detalle de películas para identificar los actores y sacar la intersección de esos conjuntos. De esta forma estaríamos un poco mas seguros de que por lo menos los actores obtenidos están referidos en varios sitios. 


---------

Problema de información inconsistente

En algnuos casos la información de la duración de las películas es inconsistente.
Para el TP1 elegí la misma opción comentada en los foros, de mantener la duración mayor. Esta desición es consistente con las consultas que realizarán los usuarios al sistema, ya que 
aunque dure unos minutos menos en algunas salas, la persona podrá ver igualmente la totalidad de la película. Si dispone de 94 minutos, entonces podra verla aunque dure 87 minutos.

otra solución podría ser mantener la duración asociada a cada sala y no alamacenarla como dato de la película. Para este dato me parece que no es necesario y genera complejidad adicional sin mucha ganancia.
